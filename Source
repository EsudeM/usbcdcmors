void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	butona_touch=1;
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(butona_touch==1)
	{
		buton_count++;
	}
	else
	{

	}

	if(butonuntouch == 1)
	{
		harf_sayar++;
	}
	else
	{
		harf_sayar=0;
	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

uint8_t butona_touch=0;
uint32_t buton_count=0;
uint32_t harf_sayar=0;
uint8_t butonuntouch=0;
uint8_t a=0;
uint8_t b=0;
uint8_t z=0;
uint8_t adsoyad[8]={111,112,211,1,22,112,2,1211,22};
uint8_t adsoyad2[9]={};
uint8_t karakter[4]={};
uint8_t Adim=0;
char tx_ad[9]="SUDEMUTLU";
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(Adim)
	  		{
	  		case 0:

	  			HAL_Delay(25000);
	  			Adim=2;
	  			if(butona_touch ==1)
	  			{
	  				butonuntouch=0;
	  				if( ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ) == 1   )
	  				{
	  					butona_touch=1;
	  				}
	  				else
	  				{
	  					butona_touch=0;

	  					if(buton_count<250)
	  					{
	  						karakter[a]= 1;
	  					}
	  					else if(buton_count>500 && buton_count<1500 )
	  					{
	  						karakter[a]= 2;
	  					}
	  					buton_count=0;
	  					a++;
	  					butonuntouch=1;
	  				}
	  			}

	  			if(harf_sayar > 1500)
	  			{
	  				Adim=1;
	  			}

	  			break;

	  		case 1:
	  			butonuntouch=0;
	  			if(a==4)
	  			{
	  				adsoyad2[b]=(karakter[0]*1000)+(karakter[1]*100)+((karakter[2]*10)+karakter[3]);
	  			}
	  			else if (a==3)
	  			{
	  				adsoyad2[b]=(karakter[0]*100)+(karakter[1]*10)+karakter[2];
	  			}
	  			else if (a==2)
	  			{
	  				adsoyad2[b]=(karakter[0]*10)+karakter[1];
	  			}
	  			else if (a==1)
	  			{
	  				adsoyad2[b]=karakter[0];
	  			}
	  			b++;
	  			for(uint8_t x=0;x<a;x++)
	  			{
	  				karakter[x]=0;
	  			}
	  			Adim=1;
	  			if(b>=9)
	  			{
	  				Adim=2;
	  			}

	  			a=0;
	  			break;

	  		case 2:

	  			HAL_UART_Transmit(&huart2, &tx_ad[0], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);

	  			HAL_UART_Transmit(&huart2, &tx_ad[1], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);

	  			HAL_UART_Transmit(&huart2, &tx_ad[2], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);

	  			HAL_UART_Transmit(&huart2, &tx_ad[3], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);

	  			HAL_UART_Transmit(&huart2, &tx_ad[4], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);

	  			HAL_UART_Transmit(&huart2, &tx_ad[5], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);


	  			HAL_UART_Transmit(&huart2, &tx_ad[6], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);

	  			HAL_UART_Transmit(&huart2, &tx_ad[7], 1, 100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(800);


	  			HAL_UART_Transmit(&huart2, &tx_ad[8], 1, 100);

	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(100);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
	  			HAL_Delay(500);
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
	  			HAL_Delay(3000);

	  			break;
	  		}
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 16;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
